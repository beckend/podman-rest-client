/*
 * supports a RESTful API for the Libpod library
 *
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IdMappingOptions : IDMappingOptions are used for specifying how ID mapping should be set up for a layer or container.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdMappingOptions {
    #[serde(rename = "AutoUserNs", skip_serializing_if = "Option::is_none")]
    pub auto_user_ns: Option<bool>,
    #[serde(rename = "AutoUserNsOpts", skip_serializing_if = "Option::is_none")]
    pub auto_user_ns_opts: Option<Box<models::AutoUserNsOptions>>,
    #[serde(rename = "GIDMap", skip_serializing_if = "Option::is_none")]
    pub gid_map: Option<Vec<models::IdMap>>,
    #[serde(rename = "HostGIDMapping", skip_serializing_if = "Option::is_none")]
    pub host_gid_mapping: Option<bool>,
    /// UIDMap and GIDMap are used for setting up a layer's root filesystem for use inside of a user namespace where ID mapping is being used. If HostUIDMapping/HostGIDMapping is true, no mapping of the respective type will be used.  Otherwise, if UIDMap and/or GIDMap contain at least one mapping, one or both will be used.  By default, if neither of those conditions apply, if the layer has a parent layer, the parent layer's mapping will be used, and if it does not have a parent layer, the mapping which was passed to the Store object when it was initialized will be used.
    #[serde(rename = "HostUIDMapping", skip_serializing_if = "Option::is_none")]
    pub host_uid_mapping: Option<bool>,
    #[serde(rename = "UIDMap", skip_serializing_if = "Option::is_none")]
    pub uid_map: Option<Vec<models::IdMap>>,
}

impl IdMappingOptions {
    /// IDMappingOptions are used for specifying how ID mapping should be set up for a layer or container.
    pub fn new() -> IdMappingOptions {
        IdMappingOptions {
            auto_user_ns: None,
            auto_user_ns_opts: None,
            gid_map: None,
            host_gid_mapping: None,
            host_uid_mapping: None,
            uid_map: None,
        }
    }
}
