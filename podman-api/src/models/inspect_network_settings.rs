/*
 * supports a RESTful API for the Libpod library
 *
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InspectNetworkSettings : InspectNetworkSettings holds information about the network settings of the container. Many fields are maintained only for compatibility with `docker inspect` and are unused within Libpod.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InspectNetworkSettings {
    /// AdditionalMacAddresses is a set of additional MAC Addresses beyond the first. CNI may configure more than one interface for a single network, which can cause this.
    #[serde(rename = "AdditionalMACAddresses", skip_serializing_if = "Option::is_none")]
    pub additional_mac_addresses: Option<Vec<String>>,
    #[serde(rename = "Bridge", skip_serializing_if = "Option::is_none")]
    pub bridge: Option<String>,
    /// EndpointID is unused, maintained exclusively for compatibility.
    #[serde(rename = "EndpointID", skip_serializing_if = "Option::is_none")]
    pub endpoint_id: Option<String>,
    /// Gateway is the IP address of the gateway this network will use.
    #[serde(rename = "Gateway", skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    /// GlobalIPv6Address is the global-scope IPv6 Address for this network.
    #[serde(rename = "GlobalIPv6Address", skip_serializing_if = "Option::is_none")]
    pub global_ipv6_address: Option<String>,
    /// GlobalIPv6PrefixLen is the length of the subnet mask of this network.
    #[serde(rename = "GlobalIPv6PrefixLen", skip_serializing_if = "Option::is_none")]
    pub global_ipv6_prefix_len: Option<i64>,
    #[serde(rename = "HairpinMode", skip_serializing_if = "Option::is_none")]
    pub hairpin_mode: Option<bool>,
    /// IPAddress is the IP address for this network.
    #[serde(rename = "IPAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    /// IPPrefixLen is the length of the subnet mask of this network.
    #[serde(rename = "IPPrefixLen", skip_serializing_if = "Option::is_none")]
    pub ip_prefix_len: Option<i64>,
    /// IPv6Gateway is the IPv6 gateway this network will use.
    #[serde(rename = "IPv6Gateway", skip_serializing_if = "Option::is_none")]
    pub ipv6_gateway: Option<String>,
    #[serde(rename = "LinkLocalIPv6Address", skip_serializing_if = "Option::is_none")]
    pub link_local_ipv6_address: Option<String>,
    #[serde(rename = "LinkLocalIPv6PrefixLen", skip_serializing_if = "Option::is_none")]
    pub link_local_ipv6_prefix_len: Option<i64>,
    /// MacAddress is the MAC address for the interface in this network.
    #[serde(rename = "MacAddress", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<String>,
    /// Networks contains information on non-default networks this container has joined. It is a map of network name to network information.
    #[serde(rename = "Networks", skip_serializing_if = "Option::is_none")]
    pub networks: Option<std::collections::HashMap<String, models::InspectAdditionalNetwork>>,
    #[serde(rename = "Ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<std::collections::HashMap<String, Vec<models::InspectHostPort>>>,
    #[serde(rename = "SandboxID", skip_serializing_if = "Option::is_none")]
    pub sandbox_id: Option<String>,
    #[serde(rename = "SandboxKey", skip_serializing_if = "Option::is_none")]
    pub sandbox_key: Option<String>,
    /// SecondaryIPAddresses is a list of extra IP Addresses that the container has been assigned in this network.
    #[serde(rename = "SecondaryIPAddresses", skip_serializing_if = "Option::is_none")]
    pub secondary_ip_addresses: Option<Vec<models::Address>>,
    /// SecondaryIPv6Addresses is a list of extra IPv6 Addresses that the container has been assigned in this network.
    #[serde(rename = "SecondaryIPv6Addresses", skip_serializing_if = "Option::is_none")]
    pub secondary_ipv6_addresses: Option<Vec<models::Address>>,
}

impl InspectNetworkSettings {
    /// InspectNetworkSettings holds information about the network settings of the container. Many fields are maintained only for compatibility with `docker inspect` and are unused within Libpod.
    pub fn new() -> InspectNetworkSettings {
        InspectNetworkSettings {
            additional_mac_addresses: None,
            bridge: None,
            endpoint_id: None,
            gateway: None,
            global_ipv6_address: None,
            global_ipv6_prefix_len: None,
            hairpin_mode: None,
            ip_address: None,
            ip_prefix_len: None,
            ipv6_gateway: None,
            link_local_ipv6_address: None,
            link_local_ipv6_prefix_len: None,
            mac_address: None,
            networks: None,
            ports: None,
            sandbox_id: None,
            sandbox_key: None,
            secondary_ip_addresses: None,
            secondary_ipv6_addresses: None,
        }
    }
}

