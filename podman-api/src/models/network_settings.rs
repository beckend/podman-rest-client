/*
 * supports a RESTful API for the Libpod library
 *
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NetworkSettings : NetworkSettings exposes the network settings in the api
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkSettings {
    #[serde(rename = "Bridge", skip_serializing_if = "Option::is_none")]
    pub bridge: Option<String>,
    #[serde(rename = "EndpointID", skip_serializing_if = "Option::is_none")]
    pub endpoint_id: Option<String>,
    #[serde(rename = "Gateway", skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(rename = "GlobalIPv6Address", skip_serializing_if = "Option::is_none")]
    pub global_ipv6_address: Option<String>,
    #[serde(rename = "GlobalIPv6PrefixLen", skip_serializing_if = "Option::is_none")]
    pub global_ipv6_prefix_len: Option<i64>,
    /// HairpinMode specifies if hairpin NAT should be enabled on the virtual interface  Deprecated: This field is never set and will be removed in a future release.
    #[serde(rename = "HairpinMode", skip_serializing_if = "Option::is_none")]
    pub hairpin_mode: Option<bool>,
    #[serde(rename = "IPAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "IPPrefixLen", skip_serializing_if = "Option::is_none")]
    pub ip_prefix_len: Option<i64>,
    #[serde(rename = "IPv6Gateway", skip_serializing_if = "Option::is_none")]
    pub ipv6_gateway: Option<String>,
    /// LinkLocalIPv6Address is an IPv6 unicast address using the link-local prefix  Deprecated: This field is never set and will be removed in a future release.
    #[serde(rename = "LinkLocalIPv6Address", skip_serializing_if = "Option::is_none")]
    pub link_local_ipv6_address: Option<String>,
    /// LinkLocalIPv6PrefixLen is the prefix length of an IPv6 unicast address  Deprecated: This field is never set and will be removed in a future release.
    #[serde(rename = "LinkLocalIPv6PrefixLen", skip_serializing_if = "Option::is_none")]
    pub link_local_ipv6_prefix_len: Option<i64>,
    #[serde(rename = "MacAddress", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<String>,
    #[serde(rename = "Networks", skip_serializing_if = "Option::is_none")]
    pub networks: Option<std::collections::HashMap<String, models::EndpointSettings>>,
    /// PortMap is a collection of PortBinding indexed by Port
    #[serde(rename = "Ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<std::collections::HashMap<String, Vec<models::PortBinding>>>,
    #[serde(rename = "SandboxID", skip_serializing_if = "Option::is_none")]
    pub sandbox_id: Option<String>,
    #[serde(rename = "SandboxKey", skip_serializing_if = "Option::is_none")]
    pub sandbox_key: Option<String>,
    #[serde(rename = "SecondaryIPAddresses", skip_serializing_if = "Option::is_none")]
    pub secondary_ip_addresses: Option<Vec<models::Address>>,
    #[serde(rename = "SecondaryIPv6Addresses", skip_serializing_if = "Option::is_none")]
    pub secondary_ipv6_addresses: Option<Vec<models::Address>>,
}

impl NetworkSettings {
    /// NetworkSettings exposes the network settings in the api
    pub fn new() -> NetworkSettings {
        NetworkSettings {
            bridge: None,
            endpoint_id: None,
            gateway: None,
            global_ipv6_address: None,
            global_ipv6_prefix_len: None,
            hairpin_mode: None,
            ip_address: None,
            ip_prefix_len: None,
            ipv6_gateway: None,
            link_local_ipv6_address: None,
            link_local_ipv6_prefix_len: None,
            mac_address: None,
            networks: None,
            ports: None,
            sandbox_id: None,
            sandbox_key: None,
            secondary_ip_addresses: None,
            secondary_ipv6_addresses: None,
        }
    }
}

