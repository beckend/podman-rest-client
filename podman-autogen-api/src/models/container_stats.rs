/*
 * supports a RESTful API for the Libpod library
 *
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ContainerStats : ContainerStats contains the statistics information for a running container
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContainerStats {
    #[serde(rename = "AvgCPU", skip_serializing_if = "Option::is_none")]
    pub avg_cpu: Option<f64>,
    #[serde(rename = "BlockInput", skip_serializing_if = "Option::is_none")]
    pub block_input: Option<i32>,
    #[serde(rename = "BlockOutput", skip_serializing_if = "Option::is_none")]
    pub block_output: Option<i32>,
    #[serde(rename = "CPU", skip_serializing_if = "Option::is_none")]
    pub cpu: Option<f64>,
    #[serde(rename = "CPUNano", skip_serializing_if = "Option::is_none")]
    pub cpu_nano: Option<i32>,
    #[serde(rename = "CPUSystemNano", skip_serializing_if = "Option::is_none")]
    pub cpu_system_nano: Option<i32>,
    #[serde(rename = "ContainerID", skip_serializing_if = "Option::is_none")]
    pub container_id: Option<String>,
    #[serde(rename = "Duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    #[serde(rename = "MemLimit", skip_serializing_if = "Option::is_none")]
    pub mem_limit: Option<i32>,
    #[serde(rename = "MemPerc", skip_serializing_if = "Option::is_none")]
    pub mem_perc: Option<f64>,
    #[serde(rename = "MemUsage", skip_serializing_if = "Option::is_none")]
    pub mem_usage: Option<i32>,
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Map of interface name to network statistics for that interface.
    #[serde(rename = "Network", skip_serializing_if = "Option::is_none")]
    pub network: Option<std::collections::HashMap<String, models::ContainerNetworkStats>>,
    #[serde(rename = "PIDs", skip_serializing_if = "Option::is_none")]
    pub pids: Option<i32>,
    #[serde(rename = "PerCPU", skip_serializing_if = "Option::is_none")]
    pub per_cpu: Option<Vec<i32>>,
    #[serde(rename = "SystemNano", skip_serializing_if = "Option::is_none")]
    pub system_nano: Option<i32>,
    /// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
    #[serde(rename = "UpTime", skip_serializing_if = "Option::is_none")]
    pub up_time: Option<i64>,
}

impl ContainerStats {
    /// ContainerStats contains the statistics information for a running container
    pub fn new() -> ContainerStats {
        ContainerStats {
            avg_cpu: None,
            block_input: None,
            block_output: None,
            cpu: None,
            cpu_nano: None,
            cpu_system_nano: None,
            container_id: None,
            duration: None,
            mem_limit: None,
            mem_perc: None,
            mem_usage: None,
            name: None,
            network: None,
            pids: None,
            per_cpu: None,
            system_nano: None,
            up_time: None,
        }
    }
}
